<?php
/**
 * InternationalVoiceServicesApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inteliquent Services API
 *
 * &nbsp; ## Introduction This document explains how to access and use the Inteliquent Services API to integrate your applications with Inteliquent’s for automated processing of telephone number, port-in, and order management operations. <br> Only RESTful protocol is supported (the Services API accepts information in JSON format). Use the following URLs to make API calls:<br> <ul>  <li>Production: https://services.inteliquent.com<br>  <li>Sandbox: https://services-sandbox.inteliquent.com (please use this environment for initial integration testing) </ul> ## Accounts and Access Request an account from Inteliquent (portal.support@inteliquent.com) for the production and sandbox API environments. After an account has been created and API access is enabled for your company, you can retrieve your company’s key and secret from the Admin section of the customer portal for the appropriate environment. <p>Access the portal using the following URLs: <ul> <li> Production: https://portal.inteliquent.com <li> Sandbox: https://portal-sandbox.inteliquent.com </ul> ### Security The Inteliquent Services API accepts HTTPS connections using TLS version 1.2. ### Authentication Two forms of authentication are supported by Services API:<br> <ul>  <li>OAuth2 Authentication and Authorization<br>  <li>Basic Authentication<br> </ul> <br><br> &nbsp; ### OAuth 2.0 <br><br> OAuth 2.0 is the authentication and authorization mechanism for the Inteliquent Services API. Your application must pass the correct token in the HTTP header to make API calls to Inteliquent. <br> Your application can request a token from the Inteliquent Token Generator with your consumer key and secret, as shown below. Tokens expire after one hour.<br><br> <b>Example Request (using curl):</b><br> <code>curl -X POST -H \"Content-Type:application/x-www-form-urlencoded\" –H \"charset:UTF-8\" https://services-token.inteliquent.com/oauth2/token --insecure --data \"client_id=YOURCONSUMERKEY&client_secret=YOURCONSUMERSECRET&grant_type=client_credentials\"</code><br> <b>Example Response:</b><br> <code>{\"scope\":\"am_application_scope default\",\"token_type\":\"bearer\",\"expires_in\":9223372036854775807,\"access_token\":\"a12b34567c89012def34g56789hi0j12\"}</code><br><br> Note- Substitute “services-token-sandbox” for “services-token” in the above URL to retrieve your token for the sandbox environment. <br><br> &nbsp; ### Authorization <br><br>  You must provide the token as part of the HTTP Header each time you make an API call.<br> When your application calls the Inteliquent services API, the API first validates that the OAuth2.0 token is valid. If so, the service call will be executed. If not, the following error message will be returned: <br> <code> <ams:fault xmlns:ams=\"http://wso2.org/apimanager/security\"> <ams:code>900901</ams:code> <ams:message>Invalid Credentials</ams:message> <ams:description>Access failure for API: /Services/2.0.0, version: 2.0.0 with key: Abcd1FghIjK23l4mno5pqrX6yzab. Make sure you have given the correct access token</ams:description> </ams:fault></code> <br><br> &nbsp; ### Basic Authentication <br><br> You can use your API Key and Secret to set the Basic Authorization header.<br><br> <b> Example Request: </b> <br> Authorization: Basic Base64 encoded(Key:Secret)  <br><br> When your application calls the Inteliquent Services API, the API first validates that the Basic Auth is valid. If so, the service call will be executed. If not, the following error message will be returned:<br><br> { \"message\": \"Invalid authentication information provided\", \"status\": \"Invalid credentials\", \"statusCode\": \"401001\", \"timestamp\": \"2019-12-10T14:07:32.310-0600\" } <br><br> &nbsp;
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: portal.support@inteliquent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * InternationalVoiceServicesApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InternationalVoiceServicesApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for intlAreaCodeInfoPost
     *
     * Supported Area Codes.
     *
     */
    public function testIntlAreaCodeInfoPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlConditionListPost
     *
     * Retrieve list of conditions for Telephone Numbers.
     *
     */
    public function testIntlConditionListPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlCountryListPost
     *
     * Supported Country List.
     *
     */
    public function testIntlCountryListPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlExcludedTnListPost
     *
     * Excluded TN List for an International Order.
     *
     */
    public function testIntlExcludedTnListPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlNumberTypesPost
     *
     * Supported Number Types.
     *
     */
    public function testIntlNumberTypesPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlOrderAddContactNotePost
     *
     * Add Order Level Contact As a Note.
     *
     */
    public function testIntlOrderAddContactNotePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlOrderAddDocumentPost
     *
     * Add Order Level Documents.
     *
     */
    public function testIntlOrderAddDocumentPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlOrderAddNotePost
     *
     * Add Order Level Notes.
     *
     */
    public function testIntlOrderAddNotePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlOrderCancelPost
     *
     * Cancel Order.
     *
     */
    public function testIntlOrderCancelPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlOrderDetailPost
     *
     * Retrieve Order Details.
     *
     */
    public function testIntlOrderDetailPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlOrderDocumentDownloadPost
     *
     * Download Order Document.
     *
     */
    public function testIntlOrderDocumentDownloadPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlOrderDocumentPost
     *
     * Retrieve Order Document List.
     *
     */
    public function testIntlOrderDocumentPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlOrderListPost
     *
     * Retrieve International Order List.
     *
     */
    public function testIntlOrderListPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlPortInOrderListPost
     *
     * Retrieve International Port-In Order List.
     *
     */
    public function testIntlPortInOrderListPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlPortInOrderPost
     *
     * Order International Port-In Numbers.
     *
     */
    public function testIntlPortInOrderPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlRoutingOptionListPost
     *
     * Supported Routing Options List.
     *
     */
    public function testIntlRoutingOptionListPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlTnAddDocumentPost
     *
     * Add International Telephone Number Documents.
     *
     */
    public function testIntlTnAddDocumentPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlTnAddNotePost
     *
     * Add TN Notes.
     *
     */
    public function testIntlTnAddNotePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlTnDetailPost
     *
     * Retrieve International Telephone Number Detail.
     *
     */
    public function testIntlTnDetailPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlTnDisconnectPost
     *
     * Disconnect Active International Telephone Number.
     *
     */
    public function testIntlTnDisconnectPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlTnDocumentDownloadPost
     *
     * Download International Telephone Number Documents.
     *
     */
    public function testIntlTnDocumentDownloadPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlTnEndUserPost
     *
     * End User Details for International Telephone Number.
     *
     */
    public function testIntlTnEndUserPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlTnInventoryPost
     *
     * Search International Telephone Number Inventory.
     *
     */
    public function testIntlTnInventoryPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlTnNoteUpdatePost
     *
     * Update Note for Active International Telephone Numbers.
     *
     */
    public function testIntlTnNoteUpdatePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlTnOrderPost
     *
     * Order International Numbers.
     *
     */
    public function testIntlTnOrderPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlTnRequestPost
     *
     * Request Telephone Numbers.
     *
     */
    public function testIntlTnRequestPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlTnReservePost
     *
     * Reserve International Numbers.
     *
     */
    public function testIntlTnReservePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlTnReservedListPost
     *
     * Retrieve Telephone Number Reserved List.
     *
     */
    public function testIntlTnReservedListPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlTnRoutingUpdatePost
     *
     * Update Telephone Number Routing.
     *
     */
    public function testIntlTnRoutingUpdatePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for intlTnUpdatePost
     *
     * Update In Service Telephone Numbers.
     *
     */
    public function testIntlTnUpdatePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
