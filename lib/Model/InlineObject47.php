<?php
/**
 * InlineObject47
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inteliquent Services API
 *
 * &nbsp; ## Introduction This document explains how to access and use the Inteliquent Services API to integrate your applications with Inteliquent’s for automated processing of telephone number, port-in, and order management operations. <br> Only RESTful protocol is supported (the Services API accepts information in JSON format). Use the following URLs to make API calls:<br> <ul>  <li>Production: https://services.inteliquent.com<br>  <li>Sandbox: https://services-sandbox.inteliquent.com (please use this environment for initial integration testing) </ul> ## Accounts and Access Request an account from Inteliquent (portal.support@inteliquent.com) for the production and sandbox API environments. After an account has been created and API access is enabled for your company, you can retrieve your company’s key and secret from the Admin section of the customer portal for the appropriate environment. <p>Access the portal using the following URLs: <ul> <li> Production: https://portal.inteliquent.com <li> Sandbox: https://portal-sandbox.inteliquent.com </ul> ### Security The Inteliquent Services API accepts HTTPS connections using TLS version 1.2. ### Authentication Two forms of authentication are supported by Services API:<br> <ul>  <li>OAuth2 Authentication and Authorization<br>  <li>Basic Authentication<br> </ul> <br><br> &nbsp; ### OAuth 2.0 <br><br> OAuth 2.0 is the authentication and authorization mechanism for the Inteliquent Services API. Your application must pass the correct token in the HTTP header to make API calls to Inteliquent. <br> Your application can request a token from the Inteliquent Token Generator with your consumer key and secret, as shown below. Tokens expire after one hour.<br><br> <b>Example Request (using curl):</b><br> <code>curl -X POST -H \"Content-Type:application/x-www-form-urlencoded\" –H \"charset:UTF-8\" https://services-token.inteliquent.com/oauth2/token --insecure --data \"client_id=YOURCONSUMERKEY&client_secret=YOURCONSUMERSECRET&grant_type=client_credentials\"</code><br> <b>Example Response:</b><br> <code>{\"scope\":\"am_application_scope default\",\"token_type\":\"bearer\",\"expires_in\":9223372036854775807,\"access_token\":\"a12b34567c89012def34g56789hi0j12\"}</code><br><br> Note- Substitute “services-token-sandbox” for “services-token” in the above URL to retrieve your token for the sandbox environment. <br><br> &nbsp; ### Authorization <br><br>  You must provide the token as part of the HTTP Header each time you make an API call.<br> When your application calls the Inteliquent services API, the API first validates that the OAuth2.0 token is valid. If so, the service call will be executed. If not, the following error message will be returned: <br> <code> <ams:fault xmlns:ams=\"http://wso2.org/apimanager/security\"> <ams:code>900901</ams:code> <ams:message>Invalid Credentials</ams:message> <ams:description>Access failure for API: /Services/2.0.0, version: 2.0.0 with key: Abcd1FghIjK23l4mno5pqrX6yzab. Make sure you have given the correct access token</ams:description> </ams:fault></code> <br><br> &nbsp; ### Basic Authentication <br><br> You can use your API Key and Secret to set the Basic Authorization header.<br><br> <b> Example Request: </b> <br> Authorization: Basic Base64 encoded(Key:Secret)  <br><br> When your application calls the Inteliquent Services API, the API first validates that the Basic Auth is valid. If so, the service call will be executed. If not, the following error message will be returned:<br><br> { \"message\": \"Invalid authentication information provided\", \"status\": \"Invalid credentials\", \"statusCode\": \"401001\", \"timestamp\": \"2019-12-10T14:07:32.310-0600\" } <br><br> &nbsp;
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: portal.support@inteliquent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineObject47 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineObject47 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_47';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'private_key' => 'string',
        'trouble_ticket_id' => 'string',
        'min_enter_date' => '\DateTime',
        'max_enter_date' => '\DateTime',
        'extl_company_ticket' => 'string',
        'trouble_ticket_status' => 'string',
        'trouble_ticket_status_exclude' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'private_key' => null,
        'trouble_ticket_id' => null,
        'min_enter_date' => 'date',
        'max_enter_date' => 'date',
        'extl_company_ticket' => null,
        'trouble_ticket_status' => null,
        'trouble_ticket_status_exclude' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'private_key' => 'privateKey',
        'trouble_ticket_id' => 'troubleTicketId',
        'min_enter_date' => 'minEnterDate',
        'max_enter_date' => 'maxEnterDate',
        'extl_company_ticket' => 'extlCompanyTicket',
        'trouble_ticket_status' => 'troubleTicketStatus',
        'trouble_ticket_status_exclude' => 'troubleTicketStatusExclude'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'private_key' => 'setPrivateKey',
        'trouble_ticket_id' => 'setTroubleTicketId',
        'min_enter_date' => 'setMinEnterDate',
        'max_enter_date' => 'setMaxEnterDate',
        'extl_company_ticket' => 'setExtlCompanyTicket',
        'trouble_ticket_status' => 'setTroubleTicketStatus',
        'trouble_ticket_status_exclude' => 'setTroubleTicketStatusExclude'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'private_key' => 'getPrivateKey',
        'trouble_ticket_id' => 'getTroubleTicketId',
        'min_enter_date' => 'getMinEnterDate',
        'max_enter_date' => 'getMaxEnterDate',
        'extl_company_ticket' => 'getExtlCompanyTicket',
        'trouble_ticket_status' => 'getTroubleTicketStatus',
        'trouble_ticket_status_exclude' => 'getTroubleTicketStatusExclude'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TROUBLE_TICKET_STATUS_OPEN = 'Open';
    const TROUBLE_TICKET_STATUS_REFERRED_OUT = 'Referred Out';
    const TROUBLE_TICKET_STATUS__24_HOUR_MONITOR = '24-Hour Monitor';
    const TROUBLE_TICKET_STATUS_RESOLVED = 'Resolved';
    const TROUBLE_TICKET_STATUS_READY_FOR_CLOSURE = 'Ready for Closure';
    const TROUBLE_TICKET_STATUS_CLOSED = 'Closed';
    const TROUBLE_TICKET_STATUS_EXCLUDE_Y = 'Y';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTroubleTicketStatusAllowableValues()
    {
        return [
            self::TROUBLE_TICKET_STATUS_OPEN,
            self::TROUBLE_TICKET_STATUS_REFERRED_OUT,
            self::TROUBLE_TICKET_STATUS__24_HOUR_MONITOR,
            self::TROUBLE_TICKET_STATUS_RESOLVED,
            self::TROUBLE_TICKET_STATUS_READY_FOR_CLOSURE,
            self::TROUBLE_TICKET_STATUS_CLOSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTroubleTicketStatusExcludeAllowableValues()
    {
        return [
            self::TROUBLE_TICKET_STATUS_EXCLUDE_Y,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['private_key'] = $data['private_key'] ?? null;
        $this->container['trouble_ticket_id'] = $data['trouble_ticket_id'] ?? null;
        $this->container['min_enter_date'] = $data['min_enter_date'] ?? null;
        $this->container['max_enter_date'] = $data['max_enter_date'] ?? null;
        $this->container['extl_company_ticket'] = $data['extl_company_ticket'] ?? null;
        $this->container['trouble_ticket_status'] = $data['trouble_ticket_status'] ?? null;
        $this->container['trouble_ticket_status_exclude'] = $data['trouble_ticket_status_exclude'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['private_key'] === null) {
            $invalidProperties[] = "'private_key' can't be null";
        }
        $allowedValues = $this->getTroubleTicketStatusAllowableValues();
        if (!is_null($this->container['trouble_ticket_status']) && !in_array($this->container['trouble_ticket_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'trouble_ticket_status', must be one of '%s'",
                $this->container['trouble_ticket_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTroubleTicketStatusExcludeAllowableValues();
        if (!is_null($this->container['trouble_ticket_status_exclude']) && !in_array($this->container['trouble_ticket_status_exclude'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'trouble_ticket_status_exclude', must be one of '%s'",
                $this->container['trouble_ticket_status_exclude'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets private_key
     *
     * @return string
     */
    public function getPrivateKey()
    {
        return $this->container['private_key'];
    }

    /**
     * Sets private_key
     *
     * @param string $private_key API key required to validate your application
     *
     * @return self
     */
    public function setPrivateKey($private_key)
    {
        $this->container['private_key'] = $private_key;

        return $this;
    }

    /**
     * Gets trouble_ticket_id
     *
     * @return string|null
     */
    public function getTroubleTicketId()
    {
        return $this->container['trouble_ticket_id'];
    }

    /**
     * Sets trouble_ticket_id
     *
     * @param string|null $trouble_ticket_id Existing trouble ticket number
     *
     * @return self
     */
    public function setTroubleTicketId($trouble_ticket_id)
    {
        $this->container['trouble_ticket_id'] = $trouble_ticket_id;

        return $this;
    }

    /**
     * Gets min_enter_date
     *
     * @return \DateTime|null
     */
    public function getMinEnterDate()
    {
        return $this->container['min_enter_date'];
    }

    /**
     * Sets min_enter_date
     *
     * @param \DateTime|null $min_enter_date Earliest trouble ticket submission date (e.g. 2015-12-20)
     *
     * @return self
     */
    public function setMinEnterDate($min_enter_date)
    {
        $this->container['min_enter_date'] = $min_enter_date;

        return $this;
    }

    /**
     * Gets max_enter_date
     *
     * @return \DateTime|null
     */
    public function getMaxEnterDate()
    {
        return $this->container['max_enter_date'];
    }

    /**
     * Sets max_enter_date
     *
     * @param \DateTime|null $max_enter_date Latest trouble ticket submission date (e.g. 2015-12-23)
     *
     * @return self
     */
    public function setMaxEnterDate($max_enter_date)
    {
        $this->container['max_enter_date'] = $max_enter_date;

        return $this;
    }

    /**
     * Gets extl_company_ticket
     *
     * @return string|null
     */
    public function getExtlCompanyTicket()
    {
        return $this->container['extl_company_ticket'];
    }

    /**
     * Sets extl_company_ticket
     *
     * @param string|null $extl_company_ticket Alphanumeric trouble ticket reference name
     *
     * @return self
     */
    public function setExtlCompanyTicket($extl_company_ticket)
    {
        $this->container['extl_company_ticket'] = $extl_company_ticket;

        return $this;
    }

    /**
     * Gets trouble_ticket_status
     *
     * @return string|null
     */
    public function getTroubleTicketStatus()
    {
        return $this->container['trouble_ticket_status'];
    }

    /**
     * Sets trouble_ticket_status
     *
     * @param string|null $trouble_ticket_status Trouble ticket status
     *
     * @return self
     */
    public function setTroubleTicketStatus($trouble_ticket_status)
    {
        $allowedValues = $this->getTroubleTicketStatusAllowableValues();
        if (!is_null($trouble_ticket_status) && !in_array($trouble_ticket_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'trouble_ticket_status', must be one of '%s'",
                    $trouble_ticket_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trouble_ticket_status'] = $trouble_ticket_status;

        return $this;
    }

    /**
     * Gets trouble_ticket_status_exclude
     *
     * @return string|null
     */
    public function getTroubleTicketStatusExclude()
    {
        return $this->container['trouble_ticket_status_exclude'];
    }

    /**
     * Sets trouble_ticket_status_exclude
     *
     * @param string|null $trouble_ticket_status_exclude Enter Y to exclude value entered into the troubleTicketStatus parameter from the results list
     *
     * @return self
     */
    public function setTroubleTicketStatusExclude($trouble_ticket_status_exclude)
    {
        $allowedValues = $this->getTroubleTicketStatusExcludeAllowableValues();
        if (!is_null($trouble_ticket_status_exclude) && !in_array($trouble_ticket_status_exclude, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'trouble_ticket_status_exclude', must be one of '%s'",
                    $trouble_ticket_status_exclude,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trouble_ticket_status_exclude'] = $trouble_ticket_status_exclude;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


