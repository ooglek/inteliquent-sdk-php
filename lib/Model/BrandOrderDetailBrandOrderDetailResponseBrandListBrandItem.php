<?php
/**
 * BrandOrderDetailBrandOrderDetailResponseBrandListBrandItem
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inteliquent Services API
 *
 * &nbsp; ## Introduction This document explains how to access and use the Inteliquent Services API to integrate your applications with Inteliquent’s for automated processing of telephone number, port-in, and order management operations. <br> Only RESTful protocol is supported (the Services API accepts information in JSON format). Use the following URLs to make API calls:<br> <ul>  <li>Production: https://services.inteliquent.com<br>  <li>Sandbox: https://services-sandbox.inteliquent.com (please use this environment for initial integration testing) </ul> ## Accounts and Access Request an account from Inteliquent (portal.support@inteliquent.com) for the production and sandbox API environments. After an account has been created and API access is enabled for your company, you can retrieve your company’s key and secret from the Admin section of the customer portal for the appropriate environment. <p>Access the portal using the following URLs: <ul> <li> Production: https://portal.inteliquent.com <li> Sandbox: https://portal-sandbox.inteliquent.com </ul> ### Security The Inteliquent Services API accepts HTTPS connections using TLS version 1.2. ### Authentication Two forms of authentication are supported by Services API:<br> <ul>  <li>OAuth2 Authentication and Authorization<br>  <li>Basic Authentication<br> </ul> <br><br> &nbsp; ### OAuth 2.0 <br><br> OAuth 2.0 is the authentication and authorization mechanism for the Inteliquent Services API. Your application must pass the correct token in the HTTP header to make API calls to Inteliquent. <br> Your application can request a token from the Inteliquent Token Generator with your consumer key and secret, as shown below. Tokens expire after one hour.<br><br> <b>Example Request (using curl):</b><br> <code>curl -X POST -H \"Content-Type:application/x-www-form-urlencoded\" –H \"charset:UTF-8\" https://services-token.inteliquent.com/oauth2/token --insecure --data \"client_id=YOURCONSUMERKEY&client_secret=YOURCONSUMERSECRET&grant_type=client_credentials\"</code><br> <b>Example Response:</b><br> <code>{\"scope\":\"am_application_scope default\",\"token_type\":\"bearer\",\"expires_in\":9223372036854775807,\"access_token\":\"a12b34567c89012def34g56789hi0j12\"}</code><br><br> Note- Substitute “services-token-sandbox” for “services-token” in the above URL to retrieve your token for the sandbox environment. <br><br> &nbsp; ### Authorization <br><br>  You must provide the token as part of the HTTP Header each time you make an API call.<br> When your application calls the Inteliquent services API, the API first validates that the OAuth2.0 token is valid. If so, the service call will be executed. If not, the following error message will be returned: <br> <code> <ams:fault xmlns:ams=\"http://wso2.org/apimanager/security\"> <ams:code>900901</ams:code> <ams:message>Invalid Credentials</ams:message> <ams:description>Access failure for API: /Services/2.0.0, version: 2.0.0 with key: Abcd1FghIjK23l4mno5pqrX6yzab. Make sure you have given the correct access token</ams:description> </ams:fault></code> <br><br> &nbsp; ### Basic Authentication <br><br> You can use your API Key and Secret to set the Basic Authorization header.<br><br> <b> Example Request: </b> <br> Authorization: Basic Base64 encoded(Key:Secret)  <br><br> When your application calls the Inteliquent Services API, the API first validates that the Basic Auth is valid. If so, the service call will be executed. If not, the following error message will be returned:<br><br> { \"message\": \"Invalid authentication information provided\", \"status\": \"Invalid credentials\", \"statusCode\": \"401001\", \"timestamp\": \"2019-12-10T14:07:32.310-0600\" } <br><br> &nbsp;
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: portal.support@inteliquent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BrandOrderDetailBrandOrderDetailResponseBrandListBrandItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class BrandOrderDetailBrandOrderDetailResponseBrandListBrandItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BrandOrderDetail_brandOrderDetailResponse_brandList_brandItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'first_name' => 'string',
        'last_name' => 'string',
        'street' => 'string',
        'city' => 'string',
        'state' => 'string',
        'postal_code' => 'string',
        'country' => 'string',
        'company_name' => 'string',
        'phone' => 'string',
        'email' => 'string',
        'ein_issuing_country' => 'string',
        'ein' => 'string',
        'stock_symbol' => 'string',
        'website' => 'string',
        'alt_business_id' => 'string',
        'msg_brand_name' => 'string',
        'brand_status' => 'string',
        'entity_name' => 'string',
        'relationship_name' => 'string',
        'stock_exchange_name' => 'string',
        'alt_business_name' => 'string',
        'vertical_name' => 'string',
        'msg_brand_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'first_name' => null,
        'last_name' => null,
        'street' => null,
        'city' => null,
        'state' => null,
        'postal_code' => null,
        'country' => null,
        'company_name' => null,
        'phone' => null,
        'email' => null,
        'ein_issuing_country' => null,
        'ein' => null,
        'stock_symbol' => null,
        'website' => null,
        'alt_business_id' => null,
        'msg_brand_name' => null,
        'brand_status' => null,
        'entity_name' => null,
        'relationship_name' => null,
        'stock_exchange_name' => null,
        'alt_business_name' => null,
        'vertical_name' => null,
        'msg_brand_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'street' => 'street',
        'city' => 'city',
        'state' => 'state',
        'postal_code' => 'postalCode',
        'country' => 'country',
        'company_name' => 'companyName',
        'phone' => 'phone',
        'email' => 'email',
        'ein_issuing_country' => 'einIssuingCountry',
        'ein' => 'ein',
        'stock_symbol' => 'stockSymbol',
        'website' => 'website',
        'alt_business_id' => 'altBusinessId',
        'msg_brand_name' => 'msgBrandName',
        'brand_status' => 'brandStatus',
        'entity_name' => 'entityName',
        'relationship_name' => 'relationshipName',
        'stock_exchange_name' => 'stockExchangeName',
        'alt_business_name' => 'altBusinessName',
        'vertical_name' => 'verticalName',
        'msg_brand_id' => 'msgBrandId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'street' => 'setStreet',
        'city' => 'setCity',
        'state' => 'setState',
        'postal_code' => 'setPostalCode',
        'country' => 'setCountry',
        'company_name' => 'setCompanyName',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'ein_issuing_country' => 'setEinIssuingCountry',
        'ein' => 'setEin',
        'stock_symbol' => 'setStockSymbol',
        'website' => 'setWebsite',
        'alt_business_id' => 'setAltBusinessId',
        'msg_brand_name' => 'setMsgBrandName',
        'brand_status' => 'setBrandStatus',
        'entity_name' => 'setEntityName',
        'relationship_name' => 'setRelationshipName',
        'stock_exchange_name' => 'setStockExchangeName',
        'alt_business_name' => 'setAltBusinessName',
        'vertical_name' => 'setVerticalName',
        'msg_brand_id' => 'setMsgBrandId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'street' => 'getStreet',
        'city' => 'getCity',
        'state' => 'getState',
        'postal_code' => 'getPostalCode',
        'country' => 'getCountry',
        'company_name' => 'getCompanyName',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'ein_issuing_country' => 'getEinIssuingCountry',
        'ein' => 'getEin',
        'stock_symbol' => 'getStockSymbol',
        'website' => 'getWebsite',
        'alt_business_id' => 'getAltBusinessId',
        'msg_brand_name' => 'getMsgBrandName',
        'brand_status' => 'getBrandStatus',
        'entity_name' => 'getEntityName',
        'relationship_name' => 'getRelationshipName',
        'stock_exchange_name' => 'getStockExchangeName',
        'alt_business_name' => 'getAltBusinessName',
        'vertical_name' => 'getVerticalName',
        'msg_brand_id' => 'getMsgBrandId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['street'] = $data['street'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['postal_code'] = $data['postal_code'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['company_name'] = $data['company_name'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['ein_issuing_country'] = $data['ein_issuing_country'] ?? null;
        $this->container['ein'] = $data['ein'] ?? null;
        $this->container['stock_symbol'] = $data['stock_symbol'] ?? null;
        $this->container['website'] = $data['website'] ?? null;
        $this->container['alt_business_id'] = $data['alt_business_id'] ?? null;
        $this->container['msg_brand_name'] = $data['msg_brand_name'] ?? null;
        $this->container['brand_status'] = $data['brand_status'] ?? null;
        $this->container['entity_name'] = $data['entity_name'] ?? null;
        $this->container['relationship_name'] = $data['relationship_name'] ?? null;
        $this->container['stock_exchange_name'] = $data['stock_exchange_name'] ?? null;
        $this->container['alt_business_name'] = $data['alt_business_name'] ?? null;
        $this->container['vertical_name'] = $data['vertical_name'] ?? null;
        $this->container['msg_brand_id'] = $data['msg_brand_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name First Name of the person who placed the order
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Last Name of the person who placed the order
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street Address of the company
     *
     * @return self
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City of the company
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State for the company
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code Postal Code for the company
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country for the company
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name Company Name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Phone Number of the company contact
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email address of the company contact
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets ein_issuing_country
     *
     * @return string|null
     */
    public function getEinIssuingCountry()
    {
        return $this->container['ein_issuing_country'];
    }

    /**
     * Sets ein_issuing_country
     *
     * @param string|null $ein_issuing_country Country that issued the Federal ID
     *
     * @return self
     */
    public function setEinIssuingCountry($ein_issuing_country)
    {
        $this->container['ein_issuing_country'] = $ein_issuing_country;

        return $this;
    }

    /**
     * Gets ein
     *
     * @return string|null
     */
    public function getEin()
    {
        return $this->container['ein'];
    }

    /**
     * Sets ein
     *
     * @param string|null $ein Federal ID of the company
     *
     * @return self
     */
    public function setEin($ein)
    {
        $this->container['ein'] = $ein;

        return $this;
    }

    /**
     * Gets stock_symbol
     *
     * @return string|null
     */
    public function getStockSymbol()
    {
        return $this->container['stock_symbol'];
    }

    /**
     * Sets stock_symbol
     *
     * @param string|null $stock_symbol Stock symbol of the company
     *
     * @return self
     */
    public function setStockSymbol($stock_symbol)
    {
        $this->container['stock_symbol'] = $stock_symbol;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website Web address of the company
     *
     * @return self
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets alt_business_id
     *
     * @return string|null
     */
    public function getAltBusinessId()
    {
        return $this->container['alt_business_id'];
    }

    /**
     * Sets alt_business_id
     *
     * @param string|null $alt_business_id Alternate Business ID if any
     *
     * @return self
     */
    public function setAltBusinessId($alt_business_id)
    {
        $this->container['alt_business_id'] = $alt_business_id;

        return $this;
    }

    /**
     * Gets msg_brand_name
     *
     * @return string|null
     */
    public function getMsgBrandName()
    {
        return $this->container['msg_brand_name'];
    }

    /**
     * Sets msg_brand_name
     *
     * @param string|null $msg_brand_name Brand Name
     *
     * @return self
     */
    public function setMsgBrandName($msg_brand_name)
    {
        $this->container['msg_brand_name'] = $msg_brand_name;

        return $this;
    }

    /**
     * Gets brand_status
     *
     * @return string|null
     */
    public function getBrandStatus()
    {
        return $this->container['brand_status'];
    }

    /**
     * Sets brand_status
     *
     * @param string|null $brand_status Brand status
     *
     * @return self
     */
    public function setBrandStatus($brand_status)
    {
        $this->container['brand_status'] = $brand_status;

        return $this;
    }

    /**
     * Gets entity_name
     *
     * @return string|null
     */
    public function getEntityName()
    {
        return $this->container['entity_name'];
    }

    /**
     * Sets entity_name
     *
     * @param string|null $entity_name Type of Entity
     *
     * @return self
     */
    public function setEntityName($entity_name)
    {
        $this->container['entity_name'] = $entity_name;

        return $this;
    }

    /**
     * Gets relationship_name
     *
     * @return string|null
     */
    public function getRelationshipName()
    {
        return $this->container['relationship_name'];
    }

    /**
     * Sets relationship_name
     *
     * @param string|null $relationship_name Type of Relationship
     *
     * @return self
     */
    public function setRelationshipName($relationship_name)
    {
        $this->container['relationship_name'] = $relationship_name;

        return $this;
    }

    /**
     * Gets stock_exchange_name
     *
     * @return string|null
     */
    public function getStockExchangeName()
    {
        return $this->container['stock_exchange_name'];
    }

    /**
     * Sets stock_exchange_name
     *
     * @param string|null $stock_exchange_name Stock Exchange on which the company is listed
     *
     * @return self
     */
    public function setStockExchangeName($stock_exchange_name)
    {
        $this->container['stock_exchange_name'] = $stock_exchange_name;

        return $this;
    }

    /**
     * Gets alt_business_name
     *
     * @return string|null
     */
    public function getAltBusinessName()
    {
        return $this->container['alt_business_name'];
    }

    /**
     * Sets alt_business_name
     *
     * @param string|null $alt_business_name Alternate Business Name
     *
     * @return self
     */
    public function setAltBusinessName($alt_business_name)
    {
        $this->container['alt_business_name'] = $alt_business_name;

        return $this;
    }

    /**
     * Gets vertical_name
     *
     * @return string|null
     */
    public function getVerticalName()
    {
        return $this->container['vertical_name'];
    }

    /**
     * Sets vertical_name
     *
     * @param string|null $vertical_name Business vertical for the company
     *
     * @return self
     */
    public function setVerticalName($vertical_name)
    {
        $this->container['vertical_name'] = $vertical_name;

        return $this;
    }

    /**
     * Gets msg_brand_id
     *
     * @return string|null
     */
    public function getMsgBrandId()
    {
        return $this->container['msg_brand_id'];
    }

    /**
     * Sets msg_brand_id
     *
     * @param string|null $msg_brand_id Internal Brand ID
     *
     * @return self
     */
    public function setMsgBrandId($msg_brand_id)
    {
        $this->container['msg_brand_id'] = $msg_brand_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


