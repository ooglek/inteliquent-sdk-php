<?php
/**
 * InlineObject62
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inteliquent Services API
 *
 * &nbsp; ## Introduction This document explains how to access and use the Inteliquent Services API to integrate your applications with Inteliquent’s for automated processing of telephone number, port-in, and order management operations. <br> Only RESTful protocol is supported (the Services API accepts information in JSON format). Use the following URLs to make API calls:<br> <ul>  <li>Production: https://services.inteliquent.com<br>  <li>Sandbox: https://services-sandbox.inteliquent.com (please use this environment for initial integration testing) </ul> ## Accounts and Access Request an account from Inteliquent (portal.support@inteliquent.com) for the production and sandbox API environments. After an account has been created and API access is enabled for your company, you can retrieve your company’s key and secret from the Admin section of the customer portal for the appropriate environment. <p>Access the portal using the following URLs: <ul> <li> Production: https://portal.inteliquent.com <li> Sandbox: https://portal-sandbox.inteliquent.com </ul> ### Security The Inteliquent Services API accepts HTTPS connections using TLS version 1.2. ### Authentication Two forms of authentication are supported by Services API:<br> <ul>  <li>OAuth2 Authentication and Authorization<br>  <li>Basic Authentication<br> </ul> <br><br> &nbsp; ### OAuth 2.0 <br><br> OAuth 2.0 is the authentication and authorization mechanism for the Inteliquent Services API. Your application must pass the correct token in the HTTP header to make API calls to Inteliquent. <br> Your application can request a token from the Inteliquent Token Generator with your consumer key and secret, as shown below. Tokens expire after one hour.<br><br> <b>Example Request (using curl):</b><br> <code>curl -X POST -H \"Content-Type:application/x-www-form-urlencoded\" –H \"charset:UTF-8\" https://services-token.inteliquent.com/oauth2/token --insecure --data \"client_id=YOURCONSUMERKEY&client_secret=YOURCONSUMERSECRET&grant_type=client_credentials\"</code><br> <b>Example Response:</b><br> <code>{\"scope\":\"am_application_scope default\",\"token_type\":\"bearer\",\"expires_in\":9223372036854775807,\"access_token\":\"a12b34567c89012def34g56789hi0j12\"}</code><br><br> Note- Substitute “services-token-sandbox” for “services-token” in the above URL to retrieve your token for the sandbox environment. <br><br> &nbsp; ### Authorization <br><br>  You must provide the token as part of the HTTP Header each time you make an API call.<br> When your application calls the Inteliquent services API, the API first validates that the OAuth2.0 token is valid. If so, the service call will be executed. If not, the following error message will be returned: <br> <code> <ams:fault xmlns:ams=\"http://wso2.org/apimanager/security\"> <ams:code>900901</ams:code> <ams:message>Invalid Credentials</ams:message> <ams:description>Access failure for API: /Services/2.0.0, version: 2.0.0 with key: Abcd1FghIjK23l4mno5pqrX6yzab. Make sure you have given the correct access token</ams:description> </ams:fault></code> <br><br> &nbsp; ### Basic Authentication <br><br> You can use your API Key and Secret to set the Basic Authorization header.<br><br> <b> Example Request: </b> <br> Authorization: Basic Base64 encoded(Key:Secret)  <br><br> When your application calls the Inteliquent Services API, the API first validates that the Basic Auth is valid. If so, the service call will be executed. If not, the following error message will be returned:<br><br> { \"message\": \"Invalid authentication information provided\", \"status\": \"Invalid credentials\", \"statusCode\": \"401001\", \"timestamp\": \"2019-12-10T14:07:32.310-0600\" } <br><br> &nbsp;
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: portal.support@inteliquent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineObject62 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineObject62 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_62';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'private_key' => 'string',
        'tn_mask' => 'string',
        'tn_wildcard' => 'string',
        'lata' => 'string',
        'rate_center' => 'string',
        'rate_center_tier' => 'string',
        'city' => 'string',
        'province' => 'string',
        'postal_code' => 'string',
        'radius' => 'int',
        'local_calling_area' => 'bool',
        'quantity' => 'int',
        'sequential' => 'bool',
        'search_on_net_only' => 'string',
        'wireless' => 'string',
        'abc_search' => 'bool',
        'page_sort' => '\OpenAPI\Client\Model\TnInventoryPageSort'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'private_key' => null,
        'tn_mask' => null,
        'tn_wildcard' => null,
        'lata' => null,
        'rate_center' => null,
        'rate_center_tier' => null,
        'city' => null,
        'province' => null,
        'postal_code' => null,
        'radius' => null,
        'local_calling_area' => null,
        'quantity' => null,
        'sequential' => null,
        'search_on_net_only' => null,
        'wireless' => null,
        'abc_search' => null,
        'page_sort' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'private_key' => 'privateKey',
        'tn_mask' => 'tnMask',
        'tn_wildcard' => 'tnWildcard',
        'lata' => 'lata',
        'rate_center' => 'rateCenter',
        'rate_center_tier' => 'rateCenterTier',
        'city' => 'city',
        'province' => 'province',
        'postal_code' => 'postalCode',
        'radius' => 'radius',
        'local_calling_area' => 'localCallingArea',
        'quantity' => 'quantity',
        'sequential' => 'sequential',
        'search_on_net_only' => 'searchOnNetOnly',
        'wireless' => 'wireless',
        'abc_search' => 'abcSearch',
        'page_sort' => 'pageSort'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'private_key' => 'setPrivateKey',
        'tn_mask' => 'setTnMask',
        'tn_wildcard' => 'setTnWildcard',
        'lata' => 'setLata',
        'rate_center' => 'setRateCenter',
        'rate_center_tier' => 'setRateCenterTier',
        'city' => 'setCity',
        'province' => 'setProvince',
        'postal_code' => 'setPostalCode',
        'radius' => 'setRadius',
        'local_calling_area' => 'setLocalCallingArea',
        'quantity' => 'setQuantity',
        'sequential' => 'setSequential',
        'search_on_net_only' => 'setSearchOnNetOnly',
        'wireless' => 'setWireless',
        'abc_search' => 'setAbcSearch',
        'page_sort' => 'setPageSort'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'private_key' => 'getPrivateKey',
        'tn_mask' => 'getTnMask',
        'tn_wildcard' => 'getTnWildcard',
        'lata' => 'getLata',
        'rate_center' => 'getRateCenter',
        'rate_center_tier' => 'getRateCenterTier',
        'city' => 'getCity',
        'province' => 'getProvince',
        'postal_code' => 'getPostalCode',
        'radius' => 'getRadius',
        'local_calling_area' => 'getLocalCallingArea',
        'quantity' => 'getQuantity',
        'sequential' => 'getSequential',
        'search_on_net_only' => 'getSearchOnNetOnly',
        'wireless' => 'getWireless',
        'abc_search' => 'getAbcSearch',
        'page_sort' => 'getPageSort'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const RATE_CENTER_TIER__0 = '0';
    const RATE_CENTER_TIER__1 = '1';
    const RATE_CENTER_TIER__2 = '2';
    const RATE_CENTER_TIER_AK = 'AK';
    const RATE_CENTER_TIER_HI = 'HI';
    const RATE_CENTER_TIER_CAN = 'CAN';
    const RATE_CENTER_TIER_PRI = 'PRI';
    const RATE_CENTER_TIER_WS_A = 'WS-A';
    const RATE_CENTER_TIER_WS_B = 'WS-B';
    const RATE_CENTER_TIER_WS_C = 'WS-C';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRateCenterTierAllowableValues()
    {
        return [
            self::RATE_CENTER_TIER__0,
            self::RATE_CENTER_TIER__1,
            self::RATE_CENTER_TIER__2,
            self::RATE_CENTER_TIER_AK,
            self::RATE_CENTER_TIER_HI,
            self::RATE_CENTER_TIER_CAN,
            self::RATE_CENTER_TIER_PRI,
            self::RATE_CENTER_TIER_WS_A,
            self::RATE_CENTER_TIER_WS_B,
            self::RATE_CENTER_TIER_WS_C,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['private_key'] = $data['private_key'] ?? null;
        $this->container['tn_mask'] = $data['tn_mask'] ?? null;
        $this->container['tn_wildcard'] = $data['tn_wildcard'] ?? null;
        $this->container['lata'] = $data['lata'] ?? null;
        $this->container['rate_center'] = $data['rate_center'] ?? null;
        $this->container['rate_center_tier'] = $data['rate_center_tier'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['province'] = $data['province'] ?? null;
        $this->container['postal_code'] = $data['postal_code'] ?? null;
        $this->container['radius'] = $data['radius'] ?? null;
        $this->container['local_calling_area'] = $data['local_calling_area'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['sequential'] = $data['sequential'] ?? null;
        $this->container['search_on_net_only'] = $data['search_on_net_only'] ?? null;
        $this->container['wireless'] = $data['wireless'] ?? null;
        $this->container['abc_search'] = $data['abc_search'] ?? null;
        $this->container['page_sort'] = $data['page_sort'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['private_key'] === null) {
            $invalidProperties[] = "'private_key' can't be null";
        }
        $allowedValues = $this->getRateCenterTierAllowableValues();
        if (!is_null($this->container['rate_center_tier']) && !in_array($this->container['rate_center_tier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rate_center_tier', must be one of '%s'",
                $this->container['rate_center_tier'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets private_key
     *
     * @return string
     */
    public function getPrivateKey()
    {
        return $this->container['private_key'];
    }

    /**
     * Sets private_key
     *
     * @param string $private_key API key required to validate your application; can be retrieved from portal production and sandbox
     *
     * @return self
     */
    public function setPrivateKey($private_key)
    {
        $this->container['private_key'] = $private_key;

        return $this;
    }

    /**
     * Gets tn_mask
     *
     * @return string|null
     */
    public function getTnMask()
    {
        return $this->container['tn_mask'];
    }

    /**
     * Sets tn_mask
     *
     * @param string|null $tn_mask Ten-digit telephone number; Accepts 0-9, x, X, or space. x, X, or space are interpreted as any single digit.(Ex: 312xxx1x2x)
     *
     * @return self
     */
    public function setTnMask($tn_mask)
    {
        $this->container['tn_mask'] = $tn_mask;

        return $this;
    }

    /**
     * Gets tn_wildcard
     *
     * @return string|null
     */
    public function getTnWildcard()
    {
        return $this->container['tn_wildcard'];
    }

    /**
     * Sets tn_wildcard
     *
     * @param string|null $tn_wildcard Telephone number. Accepts 0-9, Aa-Zz, *, or ? (e.g. \"*Hello*\" or \"312?Hi*7\")
     *
     * @return self
     */
    public function setTnWildcard($tn_wildcard)
    {
        $this->container['tn_wildcard'] = $tn_wildcard;

        return $this;
    }

    /**
     * Gets lata
     *
     * @return string|null
     */
    public function getLata()
    {
        return $this->container['lata'];
    }

    /**
     * Sets lata
     *
     * @param string|null $lata Three-digit local access and transport area code
     *
     * @return self
     */
    public function setLata($lata)
    {
        $this->container['lata'] = $lata;

        return $this;
    }

    /**
     * Gets rate_center
     *
     * @return string|null
     */
    public function getRateCenter()
    {
        return $this->container['rate_center'];
    }

    /**
     * Sets rate_center
     *
     * @param string|null $rate_center Rate center abbreviation (e.g. WSHNGTNZN1)
     *
     * @return self
     */
    public function setRateCenter($rate_center)
    {
        $this->container['rate_center'] = $rate_center;

        return $this;
    }

    /**
     * Gets rate_center_tier
     *
     * @return string|null
     */
    public function getRateCenterTier()
    {
        return $this->container['rate_center_tier'];
    }

    /**
     * Sets rate_center_tier
     *
     * @param string|null $rate_center_tier Rate center tier
     *
     * @return self
     */
    public function setRateCenterTier($rate_center_tier)
    {
        $allowedValues = $this->getRateCenterTierAllowableValues();
        if (!is_null($rate_center_tier) && !in_array($rate_center_tier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rate_center_tier', must be one of '%s'",
                    $rate_center_tier,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rate_center_tier'] = $rate_center_tier;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city Location Full Name filter for telephone numbers.
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets province
     *
     * @return string|null
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     *
     * @param string|null $province Two-letter state or province abbreviation (e.g. IL, CA)
     *
     * @return self
     */
    public function setProvince($province)
    {
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code Zip code filter for telephone numbers.
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets radius
     *
     * @return int|null
     */
    public function getRadius()
    {
        return $this->container['radius'];
    }

    /**
     * Sets radius
     *
     * @param int|null $radius radius to return numbers within specified limit (up to 50 miles)
     *
     * @return self
     */
    public function setRadius($radius)
    {
        $this->container['radius'] = $radius;

        return $this;
    }

    /**
     * Gets local_calling_area
     *
     * @return bool|null
     */
    public function getLocalCallingArea()
    {
        return $this->container['local_calling_area'];
    }

    /**
     * Sets local_calling_area
     *
     * @param bool|null $local_calling_area Enter true to return local calling area numbers
     *
     * @return self
     */
    public function setLocalCallingArea($local_calling_area)
    {
        $this->container['local_calling_area'] = $local_calling_area;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Maximum number of results to return; partial quantity may be returned based on inventory
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets sequential
     *
     * @return bool|null
     */
    public function getSequential()
    {
        return $this->container['sequential'];
    }

    /**
     * Sets sequential
     *
     * @param bool|null $sequential Enter true to return sequential numbers (up to 99)
     *
     * @return self
     */
    public function setSequential($sequential)
    {
        $this->container['sequential'] = $sequential;

        return $this;
    }

    /**
     * Gets search_on_net_only
     *
     * @return string|null
     */
    public function getSearchOnNetOnly()
    {
        return $this->container['search_on_net_only'];
    }

    /**
     * Sets search_on_net_only
     *
     * @param string|null $search_on_net_only Enter Y or N to include or exclude offnet numbers from search results; N be overridden if customer-level setting is Y in accountDefaultDetail response
     *
     * @return self
     */
    public function setSearchOnNetOnly($search_on_net_only)
    {
        $this->container['search_on_net_only'] = $search_on_net_only;

        return $this;
    }

    /**
     * Gets wireless
     *
     * @return string|null
     */
    public function getWireless()
    {
        return $this->container['wireless'];
    }

    /**
     * Sets wireless
     *
     * @param string|null $wireless Enter Y to return wireless numbers; N to return wireline numbers
     *
     * @return self
     */
    public function setWireless($wireless)
    {
        $this->container['wireless'] = $wireless;

        return $this;
    }

    /**
     * Gets abc_search
     *
     * @return bool|null
     */
    public function getAbcSearch()
    {
        return $this->container['abc_search'];
    }

    /**
     * Sets abc_search
     *
     * @param bool|null $abc_search If true, it will do searching based on alphabates as well. If its not sent or fase, it will do numeric & X based search. In case of abcSearch alphabates can be sent instead of numbers and X wont be trated as wildcard.
     *
     * @return self
     */
    public function setAbcSearch($abc_search)
    {
        $this->container['abc_search'] = $abc_search;

        return $this;
    }

    /**
     * Gets page_sort
     *
     * @return \OpenAPI\Client\Model\TnInventoryPageSort|null
     */
    public function getPageSort()
    {
        return $this->container['page_sort'];
    }

    /**
     * Sets page_sort
     *
     * @param \OpenAPI\Client\Model\TnInventoryPageSort|null $page_sort page_sort
     *
     * @return self
     */
    public function setPageSort($page_sort)
    {
        $this->container['page_sort'] = $page_sort;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


